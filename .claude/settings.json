{
  "permissions": {
    "allow": [
      "WebFetch(domain:github.com)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "WebFetch(domain:golangci-lint.run)",
      "Bash(go:*)",
      "Bash(CGO_ENABLED=:* go:*)",
      "Bash(SHELLY_FORCE_NETWORK_TESTS=:* go:*)",
      "Bash(make:*)",
      "Bash(git:*)",
      "Bash(grep:*)",
      "Bash(cat:*)",
      "Bash(ls:*)",
      "Bash(find:*)",
      "Bash(echo:*)",
      "Bash(pwd)",
      "Bash(which:*)",
      "Bash(head:*)",
      "Bash(tail:*)",
      "Bash(mkdir:*)",
      "Bash(touch:*)",
      "Bash(cp:*)",
      "Bash(mv:*)",
      "Bash(rm:-rf:*)",
      "Bash(./bin/shelly-manager:*)",
      "Bash(./bin/shelly-provisioner:*)",
      "Bash(./shelly-manager:*)",
      "Bash(./shelly-provisioner:*)",
      "Bash(timeout:*)",
      "Bash(time:*)",
      "Bash(ps:*)",
      "Bash(pgrep:*)",
      "Bash(kill:[0-9]:*)",
      "Bash(pkill:shelly-manager)",
      "Bash(pkill:go)",
      "Bash(gh:*)",
      "Bash(true)",
      "mcp__sequential-thinking__sequentialthinking",
      "Bash(curl:*)",
      "Bash(sqlite3:*)",
      "Bash(pkill:*)",
      "Bash(env)",
      "Bash(sed:*)",
      "Bash(rmdir:*)",
      "Bash(docker-compose:*)",
      "Bash(tree:*)",
      "Bash(kubectl kustomize:*)",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "Bash(CGO_ENABLED=1 GOOS=linux go build -a -installsuffix cgo -ldflags '-extldflags \"\"\"\"-static\"\"\"\" -s -w' -o test-build ./cmd/shelly-manager)",
      "Bash(env CGO_ENABLED=1 GOOS=linux go build -a -installsuffix cgo -ldflags '-extldflags \"\"\"\"-static\"\"\"\" -s -w' -o test-build ./cmd/shelly-manager)",
      "Bash(rm:*)",
      "Bash(env CGO_ENABLED=1 GOOS=linux GOARCH=arm64 go build -a -installsuffix cgo -ldflags '-extldflags \"\"\"\"-static\"\"\"\" -s -w' -o test-build-arm64 ./cmd/shelly-manager)",
      "Bash(CGO_ENABLED=1 GOOS=linux GOARCH=arm64 go build -v ./cmd/shelly-manager)",
      "Bash(env CGO_ENABLED=1 GOOS=linux GOARCH=arm64 go build -v ./cmd/shelly-manager)",
      "Bash(apt list:*)",
      "Bash(CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -o test-nocgo ./cmd/shelly-manager)",
      "Bash(CGO_ENABLED=0 go build -o test-nocgo ./cmd/shelly-manager)",
      "Bash(CGO_ENABLED=0 ./test-nocgo --version)",
      "Bash(CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -o test-build-arm64 ./cmd/shelly-manager)",
      "Bash(CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o test-build-amd64 ./cmd/shelly-manager)",
      "Bash(CGO_ENABLED=0 go build -o test-manager ./cmd/shelly-manager)",
      "Bash(CGO_ENABLED=0 go build -o test-provisioner ./cmd/shelly-provisioner)",
      "Bash(CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -o test-manager-arm64 ./cmd/shelly-manager)",
      "Bash(CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -o test-provisioner-arm64 ./cmd/shelly-provisioner)",
      "Bash(CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o test-manager-amd64 ./cmd/shelly-manager)",
      "Bash(CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o test-provisioner-amd64 ./cmd/shelly-provisioner)",
      "Bash(CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -o test-manager-windows.exe ./cmd/shelly-manager)",
      "Bash(CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -o test-provisioner-windows.exe ./cmd/shelly-provisioner)",
      "Bash(docker build:*)",
      "Bash(docker rmi:*)",
      "Bash(CGO_ENABLED=1 go test -v -short ./internal/database/provider/ -run PostgreSQL)",
      "Bash(CGO_ENABLED=1 go test -v -short ./internal/database/provider/ -run Security)",
      "Bash(CGO_ENABLED=1 go test -v -short ./internal/database/provider/)",
      "Bash(CGO_ENABLED=1 go test -v -bench=. -short ./internal/database/provider/ -run \"^(TestPostgreSQLCredentialSecurity|TestPostgreSQLSecurityDSNInjection)$\")",
      "Bash(CGO_ENABLED=1 go test -v -short -coverprofile=coverage.out ./...)",
      "Bash(CGO_ENABLED=1 go test -v -short -race ./...)",
      "Bash(export CGO_ENABLED=1)",
      "Bash(~/go/bin/govulncheck ./...)",
      "Bash(/home/serge/.local/share/mise/installs/go/1.23.6/bin/govulncheck ./...)",
      "Bash(GOOS=linux GOARCH=amd64 CGO_ENABLED=1 go build -o bin/shelly-manager-linux-amd64 ./cmd/shelly-manager)",
      "Bash(GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -o bin/shelly-manager-linux-arm64 ./cmd/shelly-manager)",
      "Bash(GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -o bin/shelly-manager-darwin-amd64 ./cmd/shelly-manager)",
      "Bash(GOOS=darwin GOARCH=arm64 CGO_ENABLED=0 go build -o bin/shelly-manager-darwin-arm64 ./cmd/shelly-manager)",
      "Bash(GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -o bin/shelly-manager-windows-amd64.exe ./cmd/shelly-manager)",
      "Bash(CGO_ENABLED=1 go test -json -short ./...)",
      "Bash(CGO_ENABLED=1 go test -short ./...)",
      "Bash(GOOS=linux GOARCH=amd64 go build ./cmd/shelly-manager)",
      "Bash(GOOS=linux GOARCH=arm64 go build ./cmd/shelly-manager)",
      "Bash(GOOS=windows GOARCH=amd64 go build ./cmd/shelly-manager)",
      "Bash(GOOS=darwin GOARCH=amd64 go build ./cmd/shelly-manager)",
      "Bash(GOOS=darwin GOARCH=arm64 go build ./cmd/shelly-manager)",
      "Bash(errcheck:*)",
      "Bash(CGO_ENABLED=1 go test -v -short ./...)",
      "Bash(env CGO_ENABLED=1 go test -v -short ./...)",
      "Bash(env CGO_ENABLED=1 go test -coverprofile=coverage.out -short ./...)",
      "Bash(for file in internal/database/manager.go internal/configuration/scheduler.go internal/notification/handlers.go internal/sync/template_engine.go internal/plugins/registry.go)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(done)",
      "Read(/home/serge/.claude/**)",
      "Bash(while read branch)",
      "Bash(do echo \"=== $branch ===\")",
      "Bash(for pr in 18 19 20 21)",
      "Bash(do echo \"=== PR $pr ===\")",
      "Bash(npm run test:*)",
      "Bash(for commit in c1a38cf 29a5f02 c895f65 b1371cd d791be4 59e64c2 58f8790)",
      "Bash(do echo \"=== Commit $commit ===\")",
      "Bash(npx vitest run:*)",
      "Bash(npx playwright test:*)",
      "Bash(npm test:*)",
      "Bash(xargs:*)",
      "Bash(npm run build:*)",
      "Bash(python3:*)",
      "Bash(docker compose:*)",
      "Bash(npx vue-tsc:*)",
      "Bash(npx tsc:*)",
      "Bash(npm run type-check:*)",
      "Bash(npm run:*)",
      "Bash(npm install:*)",
      "Bash(CI=true npx playwright test smoke.spec.ts --project=chromium --reporter=list --timeout=30000)",
      "Bash(CI=true npx playwright test api.spec.ts --project=chromium --reporter=list --timeout=30000)",
      "Bash(SHELLY_DATABASE_PROVIDER=sqlite SHELLY_DATABASE_PATH=/tmp/shelly_test.db SHELLY_LOGGING_LEVEL=warn SHELLY_DISCOVERY_ENABLED=false SHELLY_PROVISIONING_AUTO=false GIN_MODE=release ./bin/shelly-manager server)",
      "Bash(node:*)",
      "Bash(npx playwright:*)",
      "Bash(netstat:*)",
      "Bash(CGO_ENABLED=0 go build -o bin/shelly-manager ./cmd/shelly-manager)",
      "Bash(kill:*)",
      "Bash(CGO_ENABLED=1 go test -v -short ./internal/api/... -run \"Health\")",
      "Bash(CGO_ENABLED=1 go test -v -short ./internal/api -run \"UserAgent\")",
      "Bash(CGO_ENABLED=1 go test -v -short ./internal/api -run \"TestHealthEndpointsWithCurlUserAgent|TestAPIEndpointsStillValidateUserAgent\")",
      "Bash(CGO_ENABLED=1 go test -v -race -short -coverprofile=coverage.out -covermode=atomic ./...)",
      "Bash(env CGO_ENABLED=1 go test -v -race -short -coverprofile=coverage.out -covermode=atomic ./...)",
      "Bash(env CGO_ENABLED=1 go test -race -short -coverprofile=coverage.out -covermode=atomic ./...)",
      "Bash(CGO_ENABLED=1 go test -v -race -short ./internal/api)",
      "Bash(CGO_ENABLED=1 go test -v -race -short ./internal/api -run \"TestHealthEndpointsWithCurlUserAgent\")",
      "Bash(CGO_ENABLED=0 go build -o bin/test-manager ./cmd/shelly-manager)"
    ],
    "deny": [],
    "defaultMode": "acceptEdits",
    "additionalDirectories": [
      "/home/serge/scratch",
      "/home/serge",
      "/etc",
      "/tmp"
    ]
  },
  "memory": ".claude/CLAUDE.md",
  "saveSettingsPath": ".claude/settings.json",
  "useLocalSettings": false
}