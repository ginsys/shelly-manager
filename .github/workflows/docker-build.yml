name: Build and Push Docker Images

on:
  workflow_run:
    workflows: ["Test"]
    types: [completed]
    branches: [main]
  workflow_dispatch:  # Allow manual triggering

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ginsys

jobs:
  build-and-push:
    name: Build and Push Container Images
    runs-on: ubuntu-latest
    # Only run if tests passed successfully or if manually triggered
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Display workflow trigger info
        run: |
          echo "## Docker Build Triggered ðŸš€" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "- **Trigger**: Test workflow completed successfully" >> $GITHUB_STEP_SUMMARY
            echo "- **Test Workflow**: ${{ github.event.workflow_run.name }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Test Conclusion**: ${{ github.event.workflow_run.conclusion }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Test Run URL**: ${{ github.event.workflow_run.html_url }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Trigger**: Manual workflow dispatch" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          # Fetch full history for accurate timestamps
          fetch-depth: 0
          
      - name: Generate version tag
        id: version
        run: |
          # Generate timestamp-based version tag
          DATE=$(date -u +'%Y%m%d-%H%M%S')
          SHORT_SHA=$(git rev-parse --short HEAD)
          VERSION="${DATE}-${SHORT_SHA}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "date=${DATE}" >> $GITHUB_OUTPUT
          echo "sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "Generated version tag: ${VERSION}"
          
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
          config-inline: |
            [worker.oci]
              max-parallelism = 1
            
      - name: Clear Docker build cache
        run: |
          docker builder prune -a -f
          docker system prune -f
          
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata for Manager
        id: meta-manager
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/shelly-manager
          tags: |
            type=raw,value=${{ steps.version.outputs.version }}
            type=raw,value=latest
          labels: |
            org.opencontainers.image.title=Shelly Manager
            org.opencontainers.image.description=Smart home device manager for Shelly devices
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.version.outputs.date }}
            
      - name: Extract metadata for Provisioner
        id: meta-provisioner
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/shelly-provisioner
          tags: |
            type=raw,value=${{ steps.version.outputs.version }}
            type=raw,value=latest
          labels: |
            org.opencontainers.image.title=Shelly Provisioner
            org.opencontainers.image.description=WiFi provisioning agent for Shelly smart home devices
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.version.outputs.date }}
            
      - name: Build and push Manager image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./deploy/docker/Dockerfile.manager
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-manager.outputs.tags }}
          labels: ${{ steps.meta-manager.outputs.labels }}
          no-cache: true
          build-args: |
            BUILDTIME=${{ steps.version.outputs.date }}
            VERSION=${{ steps.version.outputs.version }}
            REVISION=${{ github.sha }}
            CGO_ENABLED=0
            GOOS=linux
            
      - name: Build and push Provisioner image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./deploy/docker/Dockerfile.provisioner
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-provisioner.outputs.tags }}
          labels: ${{ steps.meta-provisioner.outputs.labels }}
          no-cache: true
          build-args: |
            BUILDTIME=${{ steps.version.outputs.date }}
            VERSION=${{ steps.version.outputs.version }}
            REVISION=${{ github.sha }}
            CGO_ENABLED=0
            GOOS=linux
            
      - name: Output image information
        run: |
          echo "## Container Images Built and Pushed ðŸš€" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Version Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Tag**: \`${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Date**: \`${{ steps.version.outputs.date }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Git SHA**: \`${{ steps.version.outputs.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Images Published" >> $GITHUB_STEP_SUMMARY
          echo "#### Shelly Manager" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/shelly-manager:${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/shelly-manager:latest" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Shelly Provisioner" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/shelly-provisioner:${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/shelly-provisioner:latest" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Update docker-compose to use new version" >> $GITHUB_STEP_SUMMARY
          echo "export TAG=${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "cd deploy/docker-compose" >> $GITHUB_STEP_SUMMARY
          echo "docker-compose pull" >> $GITHUB_STEP_SUMMARY
          echo "docker-compose up -d" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
      - name: Clean up
        if: always()
        run: |
          # Clean up any build cache or temporary files
          docker buildx prune -f --filter until=24h || true