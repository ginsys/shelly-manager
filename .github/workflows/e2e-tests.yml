name: E2E Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'ui/**'
      - 'internal/**'
      - 'cmd/**'
      - '.github/workflows/e2e-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'ui/**'
      - 'internal/**'
      - 'cmd/**'
      - '.github/workflows/e2e-tests.yml'

jobs:
  e2e-tests:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    
    services:
      # Database for backend testing
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: shelly_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          cache: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ui/package-lock.json

      - name: Install Go dependencies
        run: go mod download

      - name: Build backend binaries
        run: |
          CGO_ENABLED=0 go build -o bin/shelly-manager ./cmd/shelly-manager
          CGO_ENABLED=0 go build -o bin/shelly-provisioner ./cmd/shelly-provisioner
        env:
          GOOS: linux
          GOARCH: amd64

      - name: Install UI dependencies
        working-directory: ui
        run: npm ci

      - name: Install Playwright browsers
        working-directory: ui
        run: npx playwright install --with-deps

      - name: Build UI
        working-directory: ui
        run: npm run build

      - name: Prepare test environment
        run: |
          # Create test configuration
          mkdir -p configs
          cat > configs/config.yaml << EOF
          server:
            port: 8080
            host: 0.0.0.0
          database:
            provider: sqlite
            path: /tmp/shelly_test.db
          discovery:
            enabled: false
          provisioning:
            auto: false
          logging:
            level: warn
            format: json
          metrics:
            enabled: true
            port: 9090
          EOF
          
          # Create Docker Compose override for testing
          mkdir -p deploy/docker-compose
          cat > deploy/docker-compose/docker-compose.test.yml << EOF
          services:
            shelly-manager:
              build:
                context: ../..
                dockerfile: deploy/docker/Dockerfile.manager
              environment:
                - SHELLY_DATABASE_PROVIDER=sqlite
                - SHELLY_DATABASE_PATH=/tmp/shelly_test.db
                - SHELLY_LOGGING_LEVEL=warn
                - SHELLY_DISCOVERY_ENABLED=false
                - SHELLY_PROVISIONING_AUTO=false
                - GIN_MODE=release
              ports:
                - "8080:8080"
                - "9090:9090"
              volumes:
                - ./configs:/app/configs:ro
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
                interval: 10s
                timeout: 5s
                retries: 5
                start_period: 10s
          networks:
            shelly-net:
              driver: bridge
          EOF

      - name: Start backend services
        run: |
          # Start with Docker Compose
          cd deploy/docker-compose
          docker compose -f docker-compose.test.yml up -d
          
          # Wait for backend to be ready
          timeout 60s bash -c 'until curl -f http://localhost:8080/healthz; do sleep 2; done'
        env:
          COMPOSE_DOCKER_CLI_BUILD: 1
          DOCKER_BUILDKIT: 1

      - name: Run E2E tests
        working-directory: ui
        run: npm run test:e2e
        env:
          # Playwright configuration
          CI: true
          PLAYWRIGHT_HTML_REPORT: ../test-results/playwright-report
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: test-results/playwright-report/
          retention-days: 7

      - name: Upload test videos
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-videos
          path: ui/test-results/**/*.webm
          retention-days: 7

      - name: Upload test screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-screenshots
          path: ui/test-results/**/*.png
          retention-days: 7

      - name: Stop backend services
        if: always()
        run: |
          cd deploy/docker-compose
          docker compose -f docker-compose.test.yml down -v
          docker compose -f docker-compose.test.yml rm -f

      # Test results are uploaded as artifacts above
      # Playwright HTML report provides better visualization than JSON reporter

  e2e-tests-matrix:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        project: [chromium, firefox, webkit]
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          cache: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ui/package-lock.json

      - name: Install dependencies and setup
        run: |
          go mod download
          cd ui && npm ci
          npm install -g serve
          npx playwright install --with-deps ${{ matrix.project }}

      - name: Build and start services
        run: |
          # Build backend
          CGO_ENABLED=0 go build -o bin/shelly-manager ./cmd/shelly-manager
          
          # Build frontend
          cd ui && npm run build && cd ..
          
          # Create minimal config
          mkdir -p configs
          cat > configs/config.yaml << EOF
          server:
            port: 8080
            host: 0.0.0.0
          database:
            provider: sqlite
            path: /tmp/test_${{ matrix.project }}.db
          discovery:
            enabled: false
          logging:
            level: info
          metrics:
            enabled: true
            port: 9090
          EOF
          
          # Start backend with logging
          ./bin/shelly-manager serve --config configs/config.yaml > backend.log 2>&1 &
          BACKEND_PID=$!
          echo "BACKEND_PID=$BACKEND_PID" >> $GITHUB_ENV
          
          # Start frontend server
          npx serve -s ui/dist -l 5173 > frontend.log 2>&1 &
          FRONTEND_PID=$!
          echo "FRONTEND_PID=$FRONTEND_PID" >> $GITHUB_ENV
          
          # Wait for backend with improved timeout and diagnostics
          echo "Waiting for backend to start..."
          for i in {1..60}; do
            if curl -f http://localhost:8080/healthz 2>/dev/null; then
              echo "Backend ready after $i seconds"
              break
            fi
            if [ $i -eq 60 ]; then
              echo "Backend failed to start after 60 seconds"
              echo "Backend logs:"
              cat backend.log || true
              exit 1
            fi
            sleep 1
          done
          
          # Wait for frontend
          echo "Waiting for frontend to start..."
          timeout 30s bash -c 'until curl -f http://localhost:5173 2>/dev/null; do sleep 1; done'
          echo "Frontend ready"

      - name: Run E2E tests for ${{ matrix.project }}
        working-directory: ui
        run: npx playwright test --project=${{ matrix.project }}
        env:
          CI: true

      - name: Upload test artifacts for ${{ matrix.project }}
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-${{ matrix.project }}-results
          path: |
            ui/test-results/
            ui/playwright-report/
          retention-days: 7

      - name: Cleanup
        if: always()
        run: |
          if [ ! -z "$BACKEND_PID" ]; then
            kill $BACKEND_PID || true
          fi
          if [ ! -z "$FRONTEND_PID" ]; then
            kill $FRONTEND_PID || true
          fi
          # Output logs for debugging
          echo "=== Backend Logs ==="
          cat backend.log || true
          echo "=== Frontend Logs ==="
          cat frontend.log || true