name: Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    
    - name: Install dependencies
      run: |
        go mod download
        go mod verify
    
    - name: Run tests with coverage
      run: |
        # Use -short to skip network-dependent tests that can hang in CI
        CGO_ENABLED=1 go test -v -race -short -coverprofile=coverage.out -covermode=atomic ./...
    
    - name: Generate coverage report
      run: |
        go tool cover -html=coverage.out -o coverage.html
        echo "Coverage report generated at coverage.html"
        echo "Coverage summary:"
        go tool cover -func=coverage.out | tail -1
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Upload coverage artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage.out
          coverage.html
    
    - name: Check test coverage threshold
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Total coverage: ${COVERAGE}%"
        THRESHOLD=30
        if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
          echo "Coverage ${COVERAGE}% is below threshold ${THRESHOLD}%"
          exit 1
        fi
        echo "Coverage ${COVERAGE}% meets threshold ${THRESHOLD}%"

  test-matrix:
    name: Test on ${{ matrix.os }} with Go ${{ matrix.go-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.21', '1.22', '1.23']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true
    
    - name: Install dependencies
      run: go mod download
    
    - name: Run tests
      run: |
        # Use -short to skip network-dependent tests that can hang in CI
        CGO_ENABLED=1 go test -v -race -short ./...

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        args: --timeout=5m

  build:
    name: Build Binary
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    
    - name: Build application
      run: |
        make build
        ./bin/shelly-manager version || ./bin/shelly-manager --version || echo "Version command not implemented"
    
    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: shelly-manager-binary
        path: bin/shelly-manager