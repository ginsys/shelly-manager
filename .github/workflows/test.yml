name: Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  GO_VERSION: '1.23'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    
    - name: Read golangci-lint version from mise.toml
      id: gci
      run: |
        ver=$(sed -n 's/^golangci-lint = "\([^"]\+\)"/\1/p' mise.toml)
        if [ -z "$ver" ]; then echo "Failed to read golangci-lint version from mise.toml" && exit 1; fi
        echo "version=$ver" >> $GITHUB_OUTPUT
    
    - name: Install golangci-lint (for make lint-ci)
      run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@v${{ steps.gci.outputs.version }}
    
    - name: Run complete CI test suite (parity with Makefile)
      run: |
        set -o pipefail
        make test-ci 2>&1 | tee ci-test.log

    - name: Run per-package JSON tests (structured logs)
      run: |
        set -o pipefail
        mkdir -p test-reports
        PKGS=$(go list ./...)
        for pkg in $PKGS; do
          safe=$(echo "$pkg" | tr '/.' '__')
          echo "::group::Testing $pkg (JSON)"
          # Do not fail the workflow here; structured logs are for diagnostics
          go test -json -race -short "$pkg" | tee "test-reports/${safe}.jsonl" || true
          echo "::endgroup::"
        done

    - name: Upload JSON test reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-json-reports-${{ env.GO_VERSION }}
        path: test-reports/

    - name: Install gotestsum (JUnit converter)
      if: always()
      run: go install gotest.tools/gotestsum@latest

    - name: Generate JUnit report
      if: always()
      run: |
        set -o pipefail
        # Re-run in short mode to emit JUnit; do not fail pipeline at this step
        gotestsum --format standard-verbose --junitfile junit-${{ env.GO_VERSION }}.xml -- -race -short ./... || true

    - name: Upload JUnit report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: junit-report-${{ env.GO_VERSION }}
        path: junit-${{ env.GO_VERSION }}.xml
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Upload coverage artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage.out
          coverage.html

    - name: Upload test logs artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ci-test-logs
        path: ci-test.log
    
    - name: Check test coverage threshold
      run: make test-coverage-check

  test-matrix:
    name: Test on ${{ matrix.os }} with Go ${{ matrix.go-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        go-version: ['1.23']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ matrix.go-version }}
        cache: true
    
    - name: Clean build cache
      run: |
        go clean -cache
        go clean -testcache
    
    - name: Install dependencies
      run: make deps
    
    - name: Run tests
      run: |
        set -o pipefail
        make test-matrix 2>&1 | tee matrix-test-${{ matrix.os }}-${{ matrix.go-version }}.log

    - name: Upload matrix test logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: matrix-logs-${{ matrix.os }}-${{ matrix.go-version }}
        path: matrix-test-${{ matrix.os }}-${{ matrix.go-version }}.log

    - name: Run per-package JSON tests (matrix)
      run: |
        set -o pipefail
        mkdir -p test-reports
        PKGS=$(go list ./...)
        for pkg in $PKGS; do
          safe=$(echo "$pkg" | tr '/.' '__')
          go test -json -race -short "$pkg" > "test-reports/${safe}.jsonl" || true
        done

    - name: Upload JSON test reports (matrix)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-json-reports-${{ matrix.os }}-${{ matrix.go-version }}
        path: test-reports/

    - name: Install gotestsum (JUnit converter)
      if: always()
      run: go install gotest.tools/gotestsum@latest

    - name: Generate JUnit report (matrix)
      if: always()
      run: |
        set -o pipefail
        gotestsum --format standard-verbose --junitfile junit-${{ matrix.os }}-${{ matrix.go-version }}.xml -- -race -short ./... || true

    - name: Upload JUnit report (matrix)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: junit-report-${{ matrix.os }}-${{ matrix.go-version }}
        path: junit-${{ matrix.os }}-${{ matrix.go-version }}.xml

  # Separate Windows tests that don't fail the overall workflow
  test-windows:
    name: Windows Tests (Informational)
    runs-on: windows-latest
    continue-on-error: true  # This prevents Windows failures from failing the workflow
    strategy:
      matrix:
        go-version: ['1.23']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ matrix.go-version }}
        cache: true
    
    - name: Clean build cache
      run: |
        go clean -cache
        go clean -testcache
      shell: cmd
    
    - name: Install dependencies
      run: go mod download && go mod verify
    
    - name: Run Windows tests (race, short)
      run: |
        set -o pipefail
        go test -v -race -short ./... 2>&1 | tee windows-test-${{ matrix.go-version }}.log

    - name: Upload Windows test logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: windows-logs-${{ matrix.go-version }}
        path: windows-test-${{ matrix.go-version }}.log

    - name: Install gotestsum (JUnit converter)
      if: always()
      run: go install gotest.tools/gotestsum@latest

    - name: Generate JUnit report (windows)
      if: always()
      run: |
        set -o pipefail
        gotestsum --format standard-verbose --junitfile junit-windows-${{ matrix.go-version }}.xml -- -race -short ./... || true
      shell: bash

    - name: Upload JUnit report (windows)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: junit-report-windows-${{ matrix.go-version }}
        path: junit-windows-${{ matrix.go-version }}.xml

  build:
    name: Build Binary
    runs-on: ubuntu-latest
    needs: [test, test-matrix]  # Only depends on Linux/macOS tests, not Windows
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    
    - name: Build application
      run: |
        make build
        ./bin/shelly-manager version || ./bin/shelly-manager --version || echo "Version command not implemented"
    
    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: shelly-manager-binary
        path: bin/shelly-manager
